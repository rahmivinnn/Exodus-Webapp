// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT
// ============================================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  company   String?
  phone     String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  rateCalculations RateCalculation[]
  shipments        Shipment[]
  apiKeys          ApiKey[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  CARRIER
}

// ============================================================================
// RATE CALCULATIONS
// ============================================================================

model RateCalculation {
  id            String   @id @default(cuid())
  userId        String?
  origin        String
  destination   String
  equipmentType String
  weight        Float?
  distance      Float?
  totalCost     Float
  baseRate      Float
  weightCost    Float
  distanceCost  Float
  fuelSurcharge Float
  additionalSurcharges Float
  estimatedDays Int
  confidence    Float
  isBooked      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("rate_calculations")
}

// ============================================================================
// SHIPMENTS
// ============================================================================

model Shipment {
  id              String        @id @default(cuid())
  userId          String
  trackingNumber  String        @unique
  status          ShipmentStatus @default(PENDING)
  carrier         String
  serviceType     String?
  origin          String
  destination     String
  equipmentType   String
  weight          Float?
  distance        Float?
  totalCost       Float?
  pickupDate      DateTime?
  deliveryDate    DateTime?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents ShipmentDocument[]
  trackingEvents TrackingEvent[]

  @@map("shipments")
}

enum ShipmentStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  EXCEPTION
}

// ============================================================================
// SHIPMENT DOCUMENTS
// ============================================================================

model ShipmentDocument {
  id          String   @id @default(cuid())
  shipmentId  String
  type        DocumentType
  fileName    String
  fileUrl     String
  fileSize    Int?
  mimeType    String?
  uploadedAt  DateTime @default(now())

  // Relations
  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@map("shipment_documents")
}

enum DocumentType {
  BILL_OF_LADING
  PACKING_LIST
  INVOICE
  RECEIPT
  CUSTOMS_DECLARATION
  OTHER
}

// ============================================================================
// TRACKING EVENTS
// ============================================================================

model TrackingEvent {
  id          String   @id @default(cuid())
  shipmentId  String
  status      String
  location    String?
  description String?
  timestamp   DateTime
  createdAt   DateTime @default(now())

  // Relations
  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@map("tracking_events")
}

// ============================================================================
// API KEYS
// ============================================================================

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  name      String
  key       String   @unique
  isActive  Boolean  @default(true)
  lastUsed  DateTime?
  createdAt DateTime @default(now())
  expiresAt DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// ============================================================================
// CARRIER RATES (CACHED)
// ============================================================================

model CarrierRate {
  id           String   @id @default(cuid())
  carrier      String
  origin       String
  destination  String
  equipmentType String
  serviceType  String
  baseRate     Float
  fuelSurcharge Float
  totalRate    Float
  transitDays  Int
  validFrom    DateTime
  validTo      DateTime?
  createdAt    DateTime @default(now())

  @@unique([carrier, origin, destination, equipmentType, serviceType, validFrom])
  @@map("carrier_rates")
}

// ============================================================================
// SYSTEM SETTINGS
// ============================================================================

model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  SettingType @default(STRING)
  description String?

  @@map("system_settings")
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}
