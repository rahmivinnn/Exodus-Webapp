// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  firstName String?
  lastName  String?
  phone     String?
  avatar    String?
  
  // Authentication
  password  String
  emailVerified DateTime?
  isActive  Boolean  @default(true)
  
  // Role and permissions
  role      UserRole @default(USER)
  
  // Company association
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  
  // Relationships
  shipments            Shipment[]
  addresses            Address[]
  notifications        Notification[]
  apiKeys              ApiKey[]
  auditLogs            AuditLog[]
  rateRequests         RateRequest[]
  trackingHistory      TrackingHistory[]
  notificationSettings NotificationSettings?
  files                File[]
  payments             Payment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

model Company {
  id          String  @id @default(cuid())
  name        String
  email       String?
  phone       String?
  website     String?
  taxId       String?
  
  // Billing information
  billingAddress String?
  
  // Settings
  settings    Json?
  
  // Relationships
  users       User[]
  shipments   Shipment[]
  addresses   Address[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("companies")
}

// Address Management
model Address {
  id        String      @id @default(cuid())
  type      AddressType @default(SHIPPING)
  
  // Address details
  name      String?
  company   String?
  address1  String
  address2  String?
  city      String
  state     String
  zipCode   String
  country   String
  
  // Contact information
  phone     String?
  email     String?
  
  // Validation
  isValidated Boolean @default(false)
  
  // Relationships
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  companyId String?
  companyRel Company? @relation(fields: [companyId], references: [id])
  
  // Shipment relationships
  originShipments      Shipment[] @relation("OriginAddress")
  destinationShipments Shipment[] @relation("DestinationAddress")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("addresses")
}

// Shipment Management
model Shipment {
  id             String        @id @default(cuid())
  trackingNumber String        @unique
  status         ShipmentStatus @default(PENDING)
  
  // Origin and destination
  originId       String
  origin         Address       @relation("OriginAddress", fields: [originId], references: [id])
  destinationId  String
  destination    Address       @relation("DestinationAddress", fields: [destinationId], references: [id])
  
  // Package information
  weight         Float
  length         Float
  width          Float
  height         Float
  value          Float?
  description    String?
  packageType    PackageType   @default(BOX)
  
  // Service information
  carrierId      String
  carrier        Carrier       @relation(fields: [carrierId], references: [id])
  serviceType    String
  
  // Pricing
  cost           Float?
  currency       String        @default("USD")
  
  // Delivery information
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  
  // Options
  insurance         Boolean @default(false)
  signatureRequired Boolean @default(false)
  saturdayDelivery  Boolean @default(false)
  
  // Relationships
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  companyId     String?
  company       Company?       @relation(fields: [companyId], references: [id])
  
  trackingEvents TrackingEvent[]
  documents      Document[]
  notifications  Notification[]
  rateUsed      Rate?          @relation("RateUsed", fields: [rateId], references: [id])
  rateId        String?
  files         File[]
  payments      Payment[]
  trackingHistory TrackingHistory[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("shipments")
}

// Carrier Management
model Carrier {
  id       String      @id @default(cuid())
  name     String
  code     String      @unique
  type     CarrierType @default(EXPRESS)
  logo     String?
  
  // Coverage
  domestic     Boolean @default(true)
  international Boolean @default(false)
  regions      String[] // Array of region codes
  
  // Pricing configuration
  baseRate         Float
  weightMultiplier Float
  fuelSurcharge    Float
  
  // API configuration
  apiEndpoint   String?
  authType      String?
  rateLimit     Int?
  
  // Contact information
  phone    String?
  email    String?
  website  String?
  support  String?
  
  // Metrics
  onTimeDelivery       Float? @default(0)
  customerSatisfaction Float? @default(0)
  averageTransitTime   Float? @default(0)
  damageRate          Float? @default(0)
  
  isActive  Boolean @default(true)
  
  // Relationships
  services  CarrierService[]
  shipments Shipment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("carriers")
}

model CarrierService {
  id          String  @id @default(cuid())
  name        String
  code        String
  description String?
  transitTime String
  features    String[] // Array of feature codes
  
  // Pricing
  baseRate         Float
  weightMultiplier Float
  
  // Relationships
  carrierId String
  carrier   Carrier @relation(fields: [carrierId], references: [id])
  
  isActive  Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([carrierId, code])
  @@map("carrier_services")
}

// Tracking Management
model TrackingEvent {
  id          String        @id @default(cuid())
  status      ShipmentStatus
  location    String
  description String
  details     String?
  
  // Location coordinates
  latitude  Float?
  longitude Float?
  
  // Delivery information
  signedBy String?
  
  // Relationships
  shipmentId String
  shipment   Shipment @relation(fields: [shipmentId], references: [id])
  
  timestamp DateTime @default(now())
  
  @@map("tracking_events")
}

// Document Management
model Document {
  id       String       @id @default(cuid())
  name     String
  type     DocumentType
  filename String
  fileUrl  String
  fileSize Int?
  mimeType String?
  
  // Relationships
  shipmentId String?
  shipment   Shipment? @relation(fields: [shipmentId], references: [id])
  userId     String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("documents")
}

// Notification System
model Notification {
  id      String           @id @default(cuid())
  type    NotificationType
  title   String
  message String
  data    Json?
  
  // Status
  isRead Boolean @default(false)
  
  // Relationships
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  shipmentId String?
  shipment   Shipment? @relation(fields: [shipmentId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@map("notifications")
}

// API Key Management
model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  permissions String[] // Array of permission codes
  
  // Usage tracking
  lastUsed    DateTime?
  usageCount  Int       @default(0)
  rateLimit   Int?
  
  // Status
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  
  // Relationships
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("api_keys")
}

// Audit Log
model AuditLog {
  id        String   @id @default(cuid())
  action    String
  resource  String
  resourceId String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  
  // Relationships
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  USER
  API_USER
}

enum AddressType {
  SHIPPING
  BILLING
  WAREHOUSE
}

enum ShipmentStatus {
  PENDING
  CONFIRMED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  RETURNED
  EXCEPTION
}

enum PackageType {
  ENVELOPE
  BOX
  TUBE
  PAK
  PALLET
}

enum CarrierType {
  EXPRESS
  GROUND
  FREIGHT
  INTERNATIONAL
  POSTAL
}

enum DocumentType {
  SHIPPING_LABEL
  COMMERCIAL_INVOICE
  PACKING_LIST
  CUSTOMS_FORM
  BILL_OF_LADING
  DELIVERY_RECEIPT
  INSURANCE_CERTIFICATE
  OTHER
}

enum NotificationType {
  SHIPMENT_CREATED
  SHIPMENT_PICKED_UP
  SHIPMENT_IN_TRANSIT
  SHIPMENT_DELIVERED
  SHIPMENT_EXCEPTION
  RATE_QUOTE
  SYSTEM_ALERT
}

// Real Carrier Integration Models
model RateRequest {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  
  // Address information
  fromAddress       Json
  toAddress         Json
  packages          Json
  
  // Request parameters
  requestedCarriers String[]
  requestedServices String[]
  options           Json?
  
  // Results
  rates             Rate[]
  errors            String[]
  
  createdAt         DateTime @default(now())
  
  @@map("rate_requests")
}

model Rate {
  id                  String      @id @default(cuid())
  rateRequestId       String
  rateRequest         RateRequest @relation(fields: [rateRequestId], references: [id])
  
  // Rate details
  carrier             String
  service             String
  cost                Float
  currency            String
  transitTime         String?
  deliveryDate        DateTime?
  guaranteedDelivery  Boolean     @default(false)
  
  // Ranking
  rank                Int
  
  // Additional metadata
  metadata            Json?
  
  // Relationships
  shipments           Shipment[]  @relation("RateUsed")
  
  createdAt           DateTime    @default(now())
  
  @@map("rates")
}

model CarrierLog {
  id             String   @id @default(cuid())
  carrier        String
  action         String
  trackingNumber String?
  details        Json?
  timestamp      DateTime @default(now())
  
  @@map("carrier_logs")
}

model TrackingHistory {
  id             String   @id @default(cuid())
  trackingNumber String
  carrier        String
  events         Json
  shipmentId     String?
  shipment       Shipment? @relation(fields: [shipmentId], references: [id])
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  timestamp      DateTime @default(now())
  
  @@map("tracking_history")
}

model NotificationSettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  user                  User    @relation(fields: [userId], references: [id])
  
  // Email notifications
  emailEnabled          Boolean @default(true)
  shipmentCreated       Boolean @default(true)
  shipmentPickedUp      Boolean @default(true)
  shipmentInTransit     Boolean @default(false)
  shipmentDelivered     Boolean @default(true)
  shipmentException     Boolean @default(true)
  
  // SMS notifications
  smsEnabled            Boolean @default(false)
  smsNumber             String?
  
  // Push notifications
  pushEnabled           Boolean @default(true)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("notification_settings")
}

model File {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  url         String?
  
  // File metadata
  metadata    Json?
  
  // Access control
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  isPublic    Boolean  @default(false)
  
  // Relationships
  shipmentId  String?
  shipment    Shipment? @relation(fields: [shipmentId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("files")
}

model Payment {
  id              String        @id @default(cuid())
  amount          Float
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  
  // Payment method
  paymentMethod   String?
  paymentIntentId String?       @unique
  
  // Stripe integration
  stripeCustomerId     String?
  stripePaymentMethodId String?
  
  // Metadata
  metadata        Json?
  
  // Relationships
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  shipmentId      String?
  shipment        Shipment?     @relation(fields: [shipmentId], references: [id])
  
  // Refund information
  refundedAmount  Float?        @default(0)
  refundedAt      DateTime?
  refundReason    String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}